{"version":3,"sources":["EditorTreeField/TreeSchema.ts","TreeView/TreeViewContext.ts","TreeView/TreeView.tsx","EditorTreeField/ImmutableTreeModel.ts","DraggableTreeItem/InsertTarget.tsx","TreeItem/TreeItem.tsx","DraggableTreeItem/DraggableTreeItem.tsx","InsertNodeButton/InsertNodeButton.tsx","EditorTreeField/EditorTreeField.tsx","App.tsx","index.tsx"],"names":["TreeSchema","schema","nodeTypes","rootNodeTypes","type","Error","this","findNodeTypes","items","oneOf","map","x","name","nodeSchemas","result","properties","const","nodeTypeName","push","dataSchema","data","title","childNodeTypes","children","nodeSchema","label","rawSchema","labelField","TreeViewContext","React","createContext","isExpanded","isSelected","toggle","select","withStyles","root","padding","margin","listStyle","props","classes","onSelectNode","defaultExpandedNodes","other","useState","undefined","selected","setSelected","expandedState","setExpandedState","expanded","useCallback","id","indexOf","Provider","value","event","nodeId","newExpanded","filter","role","className","clsx","pointerValue","pointer","components","split","ImmutableTreeModel","fieldPointer","treeSchema","typeProperty","dataProperty","childrenProperty","allNodes","rawValues","convertNodes","parentId","stack","nodes","i","length","node","nodeIdStack","concat","join","nodeType","nodePointer","childrenPointer","dataPointer","treeNode","labelValue","parentNode","sourceId","targetId","sourceNode","targetNode","canInsertNode","treeRoot","cloneValue","sourceValue","getNodeValue","targetValue","sourceParentList","targetParentList","sourceIndex","splice","targetIndex","newValue","parent","newNode","createNode","walkNodeValues","index","JSON","parse","stringify","tree","walker","DropTarget","canDrop","monitor","canDropNodeId","getItem","drop","dropNodeId","connect","connectDropTarget","dropTarget","isDropping","isOver","shallow","theme","height","width","dropping","background","palette","primary","main","outline","WebkitTapHighlightColor","color","text","secondary","group","marginLeft","content","display","alignItems","cursor","iconContainer","marginRight","justifyContent","indent","useContext","contentRef","useRef","expandable","Boolean","Array","isArray","expandIcon","KeyboardArrowDown","style","KeyboardArrowRight","aria-expanded","ref","onClick","Typography","component","Collapse","unmountOnExit","in","DragSource","beginDrag","endDrag","didDrop","canDrag","connectDragSource","dragSource","isDragging","canInsertNodeIdBefore","onInsertNodeIdBefore","anchorEl","setAnchorEl","handleSelect","Button","variant","disabled","currentTarget","Menu","open","onClose","MenuItem","key","border","treePane","flex","toolbar","dataPane","grow","flexGrow","onChange","treeModel","selectedNodeId","setSelectedNodeId","handleNodeSelected","selectedNode","insertNodeTypes","handleDataChange","nodeDataValue","newModel","setNodeData","handleInsertNode","insertNode","handleDeleteNode","deleteNode","handleCanInsertNodeIdBefore","handleOnInsertNodeIdBefore","insertNodeBefore","Toolbar","disableGutters","AccountTree","ButtonGroup","DndProvider","backend","HTML5Backend","renderTreeChildren","child","registry","getDefaultRegistry","fieldProviders","EditorTreeField","App","state","connected","handleValueChange","bind","handleConnect","init","sdk","frame","startAutoResizer","field","getValue","setState","setValue","withTheme","getExtensionParams","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0558d595.chunk.js","sourcesContent":["export class TreeSchema {\n  public nodeTypes: { [type: string]: TreeSchemaNodeType } = {};\n  public rootNodeTypes: string[];\n\n  constructor(private schema: any) {\n    if (schema.type !== \"array\") {\n      throw new Error('the field must have a type of \"array\"');\n    }\n    this.rootNodeTypes = this.findNodeTypes(schema.items.oneOf || []).map(\n      x => x.name\n    );\n  }\n\n  private findNodeTypes(nodeSchemas: any): TreeSchemaNodeType[] {\n    const result: TreeSchemaNodeType[] = [];\n\n    for (const schema of nodeSchemas) {\n      if (schema.type !== \"object\") {\n        throw new Error('nodes must have a type of \"object\"');\n      }\n\n      if (\n        !schema.properties ||\n        !schema.properties.type ||\n        !schema.properties.type.const\n      ) {\n        throw new Error('nodes must define a constant \"type\" property');\n      }\n\n      const nodeTypeName = schema.properties.type.const;\n\n      if (this.nodeTypes[nodeTypeName]) {\n        // Already defined\n        result.push(this.nodeTypes[nodeTypeName]);\n      } else {\n        // Not yet defined\n        const dataSchema = schema.properties.data || {};\n        if (!dataSchema.title && schema.title) {\n          dataSchema.title = schema.title;\n        }\n\n        let childNodeTypes: string[] = [];\n\n        if (\n          schema.properties.children &&\n          schema.properties.children.items &&\n          schema.properties.children.items.oneOf\n        ) {\n          childNodeTypes = this.findNodeTypes(\n            schema.properties.children.items.oneOf\n          ).map(x => x.name);\n        }\n\n        const nodeSchema: TreeSchemaNodeType = {\n          name: nodeTypeName,\n          label: schema.title || nodeTypeName,\n          dataSchema,\n          childNodeTypes,\n          rawSchema: schema\n        };\n\n        if (schema.labelField) {\n          nodeSchema.labelField = schema.labelField;\n        }\n\n        this.nodeTypes[nodeTypeName] = nodeSchema;\n        result.push(nodeSchema);\n      }\n    }\n\n    return result;\n  }\n}\n\nexport interface TreeSchemaNodeType {\n  name: string;\n  label: string;\n  childNodeTypes: string[];\n  dataSchema: any;\n  rawSchema: any;\n  labelField?: string;\n}\n","import React from \"react\";\n\nexport interface TreeViewContextInterface {\n  isExpanded: (nodeId: string) => boolean;\n  isSelected: (nodeId: string) => boolean;\n  toggle: (event: any, value: string) => void;\n  select: (nodeId: string) => void;\n}\n\nconst TreeViewContext = React.createContext<TreeViewContextInterface>({\n  isExpanded: () => false,\n  isSelected: () => false,\n  // tslint:disable-next-line:no-empty\n  toggle: () => {},\n  // tslint:disable-next-line:no-empty\n  select: () => {}\n});\n\nexport default TreeViewContext;\n","import { WithStyles, withStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React, { PropsWithChildren } from \"react\";\nimport TreeViewContext from \"./TreeViewContext\";\n\nexport const styles = {\n  root: {\n    padding: 0,\n    margin: 0,\n    listStyle: \"none\"\n  }\n};\n\nexport interface Props extends PropsWithChildren<WithStyles<typeof styles>> {\n  defaultExpandedNodes?: string[];\n  onSelectNode?: (nodeId: string) => void;\n}\n\nexport const TreeView: React.SFC<Props> = (props: Props) => {\n  const {\n    children,\n    classes,\n    onSelectNode,\n    defaultExpandedNodes,\n    ...other\n  } = props;\n\n  const [selected, setSelected] = React.useState<string | undefined>(undefined);\n\n  const [expandedState, setExpandedState] = React.useState(\n    defaultExpandedNodes || ([] as string[])\n  );\n  const expanded = expandedState || [];\n\n  const isExpanded = React.useCallback(id => expanded.indexOf(id) !== -1, [\n    expanded\n  ]);\n  const isSelected = (id: string) => selected === id;\n\n  const toggle = (event: any, nodeId: string) => {\n    const newExpanded: string[] =\n      expanded.indexOf(nodeId) !== -1\n        ? expanded.filter(id => id !== nodeId)\n        : [nodeId, ...expanded];\n    setExpandedState(newExpanded);\n  };\n\n  const select = (nodeId: string) => {\n    setSelected(nodeId);\n\n    if (onSelectNode) {\n      onSelectNode(nodeId);\n    }\n  };\n\n  return (\n    <TreeViewContext.Provider\n      value={{\n        isExpanded,\n        isSelected,\n        toggle,\n        select\n      }}\n    >\n      <ul role=\"tree\" className={clsx(classes.root)} {...other}>\n        {children}\n      </ul>\n    </TreeViewContext.Provider>\n  );\n};\n\nexport default withStyles(styles, { name: \"DcTreeView\" })(TreeView);\n","import { TreeSchema } from \"./TreeSchema\";\n\nexport interface TreeNode {\n  nodeId: string;\n  nodeType: string;\n  label: string;\n  children: TreeNode[];\n  parentId: string | undefined;\n\n  nodePointer: string;\n  dataPointer: string;\n  childrenPointer: string;\n}\n\nfunction pointerValue(value: any, pointer: string): any {\n  const components = pointer.split(\"/\");\n  let result: any = value;\n\n  for (const component of components) {\n    result = result[component];\n    if (!result) {\n      return result;\n    }\n  }\n\n  return result;\n}\n\nexport class ImmutableTreeModel {\n  public children: TreeNode[];\n  public allNodes: { [nodeId: string]: TreeNode };\n  public rawValues: { [nodeId: string]: any };\n\n  constructor(\n    public value: any[] = [],\n    private fieldPointer: string,\n    private treeSchema: TreeSchema,\n    private typeProperty: string = \"type\",\n    private dataProperty: string = \"data\",\n    private childrenProperty: string = \"children\"\n  ) {\n    this.rawValues = {};\n    this.allNodes = {};\n\n    const convertNodes = (\n      parentId: string | undefined,\n      stack: string[],\n      nodes: any[] = [],\n      pointer: string\n    ): TreeNode[] => {\n      const result: TreeNode[] = [];\n      for (let i = 0; i < nodes.length; i++) {\n        const node: any = nodes[i];\n        const nodeIdStack = stack.concat(`${i}`);\n        const nodeId = nodeIdStack.join(\"/\");\n\n        const nodeTypeName = node[typeProperty];\n        const nodeType = treeSchema.nodeTypes[nodeTypeName];\n\n        const nodePointer = `${pointer}/${i}`;\n        const childrenPointer = nodePointer + `/${childrenProperty}`;\n        const dataPointer = nodePointer + `/${dataProperty}`;\n\n        const treeNode: TreeNode = {\n          nodeId,\n          nodeType: nodeTypeName,\n          label: node[typeProperty],\n          children: convertNodes(\n            nodeId,\n            nodeIdStack,\n            node[childrenProperty],\n            childrenPointer\n          ),\n          parentId,\n\n          nodePointer,\n          childrenPointer,\n          dataPointer\n        };\n\n        if (nodeType) {\n          treeNode.label = nodeType.label;\n\n          if (nodeType.labelField) {\n            const labelValue = pointerValue(node.data, nodeType.labelField);\n            treeNode.label = labelValue ? `${labelValue}` : nodeType.label; // (${nodeType.label})\n          }\n        }\n\n        this.rawValues[nodeId] = node;\n        this.allNodes[nodeId] = treeNode;\n        result.push(treeNode);\n      }\n      return result;\n    };\n\n    this.children = convertNodes(undefined, [], value, fieldPointer);\n  }\n\n  public canInsertNode(parentId: string | undefined, nodeId: string): boolean {\n    const node = this.allNodes[nodeId];\n    const nodeType = node.nodeType;\n\n    if (!parentId) {\n      return this.treeSchema.rootNodeTypes.indexOf(nodeType) !== -1;\n    } else {\n      const parentNode = this.allNodes[parentId];\n      return (\n        this.treeSchema.nodeTypes[parentNode.nodeType].childNodeTypes.indexOf(\n          nodeType\n        ) !== -1\n      );\n    }\n  }\n\n  public insertNodeBefore(\n    sourceId: string,\n    targetId: string\n  ): ImmutableTreeModel {\n    // If trying to insert a node before itself... no change\n    if (sourceId === targetId) {\n      return this;\n    }\n\n    const sourceNode = this.allNodes[sourceId];\n    const targetNode = this.allNodes[targetId];\n\n    if (!sourceNode || !targetNode) {\n      return this;\n    }\n\n    if (!this.canInsertNode(targetNode.parentId, sourceId)) {\n      return this;\n    }\n\n    const treeRoot = this.cloneValue();\n\n    const sourceValue = this.getNodeValue(treeRoot, sourceId);\n    const targetValue = this.getNodeValue(treeRoot, targetId);\n\n    const sourceParentList = sourceNode.parentId\n      ? this.getNodeValue(treeRoot, sourceNode.parentId).children\n      : treeRoot;\n    const targetParentList = targetNode.parentId\n      ? this.getNodeValue(treeRoot, targetNode.parentId).children\n      : treeRoot;\n\n    const sourceIndex = sourceParentList.indexOf(sourceValue);\n    if (sourceIndex !== -1) {\n      // remove from existing parent\n      sourceParentList.splice(sourceIndex, 1);\n    } else {\n      // unknown error\n      return this;\n    }\n\n    const targetIndex = targetParentList.indexOf(targetValue);\n\n    if (targetIndex !== -1) {\n      targetParentList.splice(targetIndex, 0, sourceValue);\n    } else {\n      return this;\n    }\n\n    return new ImmutableTreeModel(treeRoot, this.fieldPointer, this.treeSchema);\n  }\n\n  public setNodeData(nodeId: string, data: any): ImmutableTreeModel {\n    const newValue = this.cloneValue();\n    const node = this.getNodeValue(newValue, nodeId);\n    node.data = data;\n    return new ImmutableTreeModel(newValue, this.fieldPointer, this.treeSchema);\n  }\n\n  public insertNode(\n    parent: string | undefined,\n    nodeType: string\n  ): ImmutableTreeModel {\n    const newValue = this.cloneValue();\n    const newNode = this.createNode(nodeType);\n\n    if (!parent) {\n      newValue.push(newNode);\n    } else {\n      const parentNode = this.getNodeValue(newValue, parent);\n      if (!parentNode.children) {\n        parentNode.children = [];\n      }\n      parentNode.children.push(newNode);\n    }\n    return new ImmutableTreeModel(newValue, this.fieldPointer, this.treeSchema);\n  }\n\n  public deleteNode(nodeId: string | undefined): ImmutableTreeModel {\n    if (!nodeId) {\n      return this;\n    }\n\n    const newValue = this.cloneValue();\n\n    this.walkNodeValues(\n      newValue,\n      (id: string, node: any, parent: any, index: number) => {\n        if (id === nodeId) {\n          const nodeList: any[] = parent ? parent.children : newValue;\n          nodeList.splice(index, 1);\n        }\n      }\n    );\n\n    return new ImmutableTreeModel(newValue, this.fieldPointer, this.treeSchema);\n  }\n\n  private createNode(nodeType: string): any {\n    return {\n      [this.typeProperty]: nodeType,\n      [this.dataProperty]: {},\n      [this.childrenProperty]: []\n    };\n  }\n\n  private cloneValue(): any[] {\n    return JSON.parse(JSON.stringify(this.value));\n  }\n\n  private getNodeValue(tree: any[], nodeId: string): any {\n    let result = null;\n    this.walkNodeValues(tree, (id: string, node: any) => {\n      if (id === nodeId) {\n        result = node;\n      }\n    });\n    return result;\n  }\n\n  private walkNodeValues(\n    tree: any[],\n    walker: (nodeId: string, node: any, parent: any, index: number) => void,\n    stack: string[] = [],\n    parent: any = null\n  ): void {\n    for (let i = 0; i < tree.length; i++) {\n      const node: any = tree[i];\n      const nodeIdStack = stack.concat(`${i}`);\n      const nodeId = nodeIdStack.join(\"/\");\n\n      walker(nodeId, node, parent, i);\n\n      if (node.children) {\n        this.walkNodeValues(node.children, walker, nodeIdStack, node);\n      }\n    }\n  }\n}\n","import { Theme, WithStyles, withStyles } from \"@material-ui/core\";\nimport React, { PropsWithChildren } from \"react\";\n\nimport clsx from \"clsx\";\nimport {\n  ConnectDropTarget,\n  DropTarget,\n  DropTargetConnector,\n  DropTargetMonitor,\n  DropTargetSpec\n} from \"react-dnd\";\n\nexport const styles = (theme: Theme) => ({\n  root: {\n    height: 3,\n    width: \"100%\"\n  },\n\n  dropping: {\n    background: theme.palette.primary.main\n  }\n});\n\nexport type Props = WithStyles<typeof styles> & {\n  canDropNodeId?: (nodeId: string) => boolean;\n  dropNodeId?: (nodeId: string) => void;\n};\n\nexport interface DropProps {\n  readonly connectDropTarget: ConnectDropTarget;\n  readonly canDrop: boolean;\n  readonly isDropping: boolean;\n}\n\nconst spec: DropTargetSpec<Props> = {\n  canDrop(props: Props, monitor: DropTargetMonitor): boolean {\n    if (props.canDropNodeId) {\n      return props.canDropNodeId(monitor.getItem().nodeId);\n    } else {\n      return false;\n    }\n  },\n  drop(props: Props, monitor: DropTargetMonitor): void {\n    if (props.dropNodeId) {\n      props.dropNodeId(monitor.getItem().nodeId);\n    }\n  }\n};\n\nconst collectNodeDropProps = (\n  connect: DropTargetConnector,\n  monitor: DropTargetMonitor\n): DropProps => ({\n  connectDropTarget: connect.dropTarget(),\n  canDrop: monitor.canDrop(),\n  isDropping: monitor.isOver({ shallow: true }) && monitor.canDrop()\n});\n\nexport const InsertTarget: React.SFC<Props & DropProps> = (\n  props: Props & DropProps\n) => {\n  const { classes, ...other } = props;\n\n  return props.connectDropTarget(\n    <div\n      className={clsx(classes.root, {\n        [classes.dropping]: props.isDropping\n      })}\n    />\n  );\n};\n\nexport default DropTarget(\n  \"tree-item\",\n  spec,\n  collectNodeDropProps\n)(\n  withStyles(styles as any, { name: \"DcDraggableTreeItemInsertTarget\" })(\n    InsertTarget\n  )\n);\n","import { Theme, WithStyles, withStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React, { PropsWithChildren } from \"react\";\n\n// tslint:disable-next-line:no-submodule-imports\nimport Collapse from \"@material-ui/core/Collapse\";\n// tslint:disable-next-line:no-submodule-imports\nimport Typography from \"@material-ui/core/Typography\";\nimport { KeyboardArrowDown, KeyboardArrowRight } from \"@material-ui/icons\";\nimport TreeViewContext from \"../TreeView/TreeViewContext\";\n\nconst styles = (theme: Theme) => ({\n  root: {\n    listStyle: \"none\",\n    margin: 0,\n    padding: 0,\n    outline: 0,\n    WebkitTapHighlightColor: \"transparent\",\n    color: theme.palette.text.secondary\n  },\n  selected: {\n    // color: theme.palette.primary.main\n  },\n  /* Pseudo-class applied to the root element when expanded. */\n  expanded: {},\n  /* Styles applied to the `role=\"group\"` element. */\n  group: {\n    margin: 0,\n    padding: 0,\n    marginLeft: 26\n  },\n  /* Styles applied to the tree node content. */\n  content: {\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      color: theme.palette.text.primary\n    }\n  },\n  /* Styles applied to the tree node icon and collapse/expand icon. */\n  iconContainer: {\n    marginRight: 2,\n    width: 15,\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n  indent: {\n    width: 18\n  },\n  /* Styles applied to the label element. */\n  label: {\n    width: \"100%\"\n  }\n});\n\nexport interface TreeItemProps\n  extends PropsWithChildren<WithStyles<typeof styles>> {\n  nodeId?: string;\n  label: string;\n}\n\nconst TreeItem: React.SFC<TreeItemProps> = (props: TreeItemProps) => {\n  const { children, classes, nodeId = \"\", label, ...other } = props;\n\n  const { isExpanded, isSelected, toggle, select } = React.useContext(\n    TreeViewContext\n  );\n\n  const nodeRef = React.useRef(null);\n  const contentRef = React.useRef(null);\n\n  const expandable = Boolean(\n    Array.isArray(children) ? children.length : children\n  );\n  const expanded = isExpanded ? isExpanded(nodeId) : false;\n  const selected = isSelected ? isSelected(nodeId) : false;\n\n  const handleClick = (event: any) => {\n    if (!selected) {\n      select(nodeId);\n    }\n\n    if (expandable && !expanded && toggle) {\n      toggle(event, nodeId);\n    }\n  };\n\n  const handleClickIcon = (event: any) => {\n    if (expandable && toggle) {\n      toggle(event, nodeId);\n    }\n  };\n\n  const expandIcon = expandable ? (\n    expanded ? (\n      <KeyboardArrowDown style={{ width: 15, height: 15 }} />\n    ) : (\n      <KeyboardArrowRight style={{ width: 15, height: 15 }} />\n    )\n  ) : null;\n\n  return (\n    <li\n      className={clsx(classes.root, {\n        [classes.expanded]: expanded,\n        [classes.selected]: selected\n      })}\n      role=\"treeitem\"\n      aria-expanded={expandable ? expanded : undefined}\n      {...other}\n    >\n      <div className={classes.content} ref={contentRef} onClick={handleClick}>\n        {expandIcon ? (\n          <div onClick={handleClickIcon} className={classes.iconContainer}>\n            {expandIcon}\n          </div>\n        ) : (\n          <div className={clsx(classes.indent)} />\n        )}\n        <Typography component={\"div\" as any} className={classes.label}>\n          {label}\n        </Typography>\n      </div>\n      {children && (\n        <Collapse\n          unmountOnExit={true}\n          className={classes.group}\n          in={expanded}\n          component=\"ul\"\n        >\n          {children}\n        </Collapse>\n      )}\n    </li>\n  );\n};\n\nexport default withStyles(styles, { name: \"DcTreeItem\" })(TreeItem);\n","import { WithStyles, withStyles } from \"@material-ui/core\";\nimport React, { PropsWithChildren } from \"react\";\n\nimport {\n  ConnectDragSource,\n  DragSource,\n  DragSourceConnector,\n  DragSourceMonitor,\n  DragSourceSpec\n} from \"react-dnd\";\nimport InsertTarget from \"./InsertTarget\";\n\nimport { TreeItem, TreeItemProps } from \"../TreeItem\";\n\nexport const styles = {\n  root: {}\n};\n\nexport type Props = Omit<TreeItemProps, \"classes\"> &\n  PropsWithChildren<WithStyles<typeof styles>> & {\n    canInsertNodeIdBefore?: (nodeId: string) => boolean;\n    onInsertNodeIdBefore?: (nodeId: string) => void;\n  };\n\nexport interface DragProps {\n  readonly connectDragSource: ConnectDragSource;\n  readonly isDragging: boolean;\n}\n\nconst spec: DragSourceSpec<Props, any> = {\n  beginDrag(props: Props, monitor: DragSourceMonitor, component: any): any {\n    return {\n      nodeId: props.nodeId\n    };\n  },\n  endDrag(props: Props, monitor: DragSourceMonitor, component: any): void {\n    const didDrop = monitor.didDrop();\n  },\n  canDrag(props: Props, monitor: DragSourceMonitor): boolean {\n    return true;\n  }\n};\n\nconst collectNodeDragProps: (\n  connect: DragSourceConnector,\n  monitor: DragSourceMonitor\n) => DragProps = (connect, monitor) => ({\n  connectDragSource: connect.dragSource(),\n  isDragging: monitor.isDragging()\n});\n\nconst DraggableTreeItem: React.SFC<Props & DragProps> = (\n  props: Props & DragProps\n) => {\n  const {\n    classes,\n    children,\n    canInsertNodeIdBefore,\n    onInsertNodeIdBefore,\n    ...other\n  } = props;\n\n  return props.connectDragSource(\n    <div>\n      <InsertTarget\n        canDropNodeId={canInsertNodeIdBefore}\n        dropNodeId={onInsertNodeIdBefore}\n      />\n      <TreeItem {...other}>{children}</TreeItem>\n    </div>\n  );\n};\n\nexport default DragSource(\n  \"tree-item\",\n  spec,\n  collectNodeDragProps\n)(withStyles(styles, { name: \"DcDraggableTreeItem\" })(DraggableTreeItem));\n","import {\n  Button,\n  Menu,\n  MenuItem,\n  Typography,\n  WithStyles,\n  withStyles\n} from \"@material-ui/core\";\n\nimport React from \"react\";\nimport { TreeSchema } from \"../EditorTreeField/TreeSchema\";\n\nexport const styles = {\n  root: {}\n};\n\nexport interface Props extends WithStyles<typeof styles> {\n  treeSchema: TreeSchema;\n  nodeTypes: string[];\n  onClick: (nodeType: string) => void;\n}\n\nexport const InsertNodeButton: React.SFC<Props> = (props: Props) => {\n  const { treeSchema, nodeTypes, onClick } = props;\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event: any) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleSelect = (nodeType: string) => {\n    setAnchorEl(null);\n    onClick(nodeType);\n  };\n\n  return (\n    <div>\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        disabled={nodeTypes.length === 0}\n        onClick={handleClick}\n      >\n        <Typography>+ Add</Typography>\n      </Button>\n\n      <Menu open={Boolean(anchorEl)} onClose={handleClose} anchorEl={anchorEl}>\n        {nodeTypes.map(nodeType => (\n          <MenuItem key={nodeType} onClick={() => handleSelect(nodeType)}>\n            {treeSchema.nodeTypes[nodeType].label}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default withStyles(styles, {\n  name: \"DcEditorTreeFieldInsertNodeButton\"\n})(InsertNodeButton);\n","import React from \"react\";\n\nimport {\n  Button,\n  ButtonGroup,\n  Theme,\n  Toolbar,\n  Typography,\n  withStyles,\n  WithStyles\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport {\n  EditorField,\n  WithEditorFieldProps\n} from \"unofficial-dynamic-content-ui\";\nimport { TreeSchema } from \"./TreeSchema\";\n\nimport TreeView from \"../TreeView\";\nimport { ImmutableTreeModel, TreeNode } from \"./ImmutableTreeModel\";\n\nimport { AccountTree } from \"@material-ui/icons\";\n\nimport { DraggableTreeItem } from \"../DraggableTreeItem\";\nimport InsertNodeButton from \"../InsertNodeButton/InsertNodeButton\";\nimport { TreeItem } from \"../TreeItem\";\n\nimport { DndProvider } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\n\nexport const styles = (theme: Theme) => ({\n  root: {\n    display: \"flex\",\n    border: \"1px solid rgba(157,162,162,.3)\",\n    \"border-radius\": 5\n  },\n  treePane: {\n    flex: 0.4,\n    \"border-right\": \"1px solid #e5e5e5\"\n  },\n  tree: {\n    padding: \"10px 10px 10px 10px\"\n  },\n  toolbar: {\n    \"background-color\": \"#f5f5f5\",\n    \"border-bottom\": \"1px solid #e5e5e5\",\n    \"border-radius\": 5,\n    color: theme.palette.primary.main,\n    \"padding-left\": 10,\n    \"padding-right\": 10\n  },\n  dataPane: {\n    flex: 0.7,\n    padding: \"10px 10px 10px 10px\"\n  },\n  grow: {\n    flexGrow: 1\n  }\n});\n\nexport interface Props\n  extends WithEditorFieldProps<WithStyles<typeof styles>> {}\n\nconst EditorTreeField: React.SFC<Props> = (props: Props) => {\n  const { schema, value, onChange, classes, pointer } = props;\n\n  const treeSchema: TreeSchema = new TreeSchema(schema);\n  const treeModel: ImmutableTreeModel = new ImmutableTreeModel(\n    value,\n    pointer,\n    treeSchema\n  );\n  const [selectedNodeId, setSelectedNodeId] = React.useState<\n    string | undefined\n  >();\n\n  const renderTreeChildren = (children: TreeNode[]) => {\n    return children.map(child => (\n      <DraggableTreeItem\n        key={child.nodeId}\n        nodeId={child.nodeId}\n        label={child.label}\n        canInsertNodeIdBefore={nodeId =>\n          handleCanInsertNodeIdBefore(nodeId, child.nodeId)\n        }\n        onInsertNodeIdBefore={nodeId =>\n          handleOnInsertNodeIdBefore(nodeId, child.nodeId)\n        }\n      >\n        {renderTreeChildren(child.children)}\n      </DraggableTreeItem>\n    ));\n  };\n\n  const handleNodeSelected = React.useCallback((nodeId: string) => {\n    setSelectedNodeId(nodeId);\n  }, []);\n\n  const selectedNode: TreeNode | undefined = selectedNodeId\n    ? treeModel.allNodes[selectedNodeId]\n    : undefined;\n  const insertNodeTypes = selectedNode\n    ? treeSchema.nodeTypes[selectedNode.nodeType].childNodeTypes\n    : treeSchema.rootNodeTypes;\n\n  const handleDataChange = React.useCallback(\n    (nodeDataValue: any) => {\n      if (!selectedNodeId) {\n        return;\n      }\n\n      const newModel = treeModel.setNodeData(selectedNodeId, nodeDataValue);\n      if (onChange) {\n        onChange(newModel.value);\n      }\n    },\n    [selectedNodeId, treeModel]\n  );\n\n  const handleInsertNode = React.useCallback(\n    (nodeType: any) => {\n      const newModel = treeModel.insertNode(selectedNodeId, nodeType);\n      if (onChange) {\n        onChange(newModel.value);\n      }\n    },\n    [selectedNodeId, treeModel]\n  );\n\n  const handleDeleteNode = React.useCallback(() => {\n    const newModel = treeModel.deleteNode(selectedNodeId);\n    if (onChange) {\n      onChange(newModel.value);\n    }\n  }, [selectedNodeId, setSelectedNodeId, treeModel]);\n\n  const handleCanInsertNodeIdBefore = React.useCallback(\n    (sourceId: string, targetId: string) => {\n      const targetNode = treeModel.allNodes[targetId];\n      return treeModel.canInsertNode(targetNode.parentId, sourceId);\n    },\n    [treeModel]\n  );\n\n  const handleOnInsertNodeIdBefore = React.useCallback(\n    (sourceId: string, targetId: string) => {\n      const newModel = treeModel.insertNodeBefore(sourceId, targetId);\n      if (onChange) {\n        onChange(newModel.value);\n      }\n    },\n    [treeModel]\n  );\n\n  const defaultExpandedNodes = [undefined as any];\n\n  return (\n    <div className={clsx(classes.root)}>\n      <div className={clsx(classes.treePane)}>\n        <Toolbar\n          className={clsx(classes.toolbar)}\n          variant=\"dense\"\n          disableGutters={true}\n        >\n          <AccountTree />\n\n          <div className={classes.grow} />\n\n          <ButtonGroup variant=\"outlined\">\n            <InsertNodeButton\n              onClick={handleInsertNode}\n              treeSchema={treeSchema}\n              nodeTypes={insertNodeTypes}\n            />\n            <Button\n              onClick={handleDeleteNode}\n              variant=\"outlined\"\n              color=\"primary\"\n              disabled={!Boolean(selectedNode)}\n            >\n              <Typography>Delete</Typography>\n            </Button>\n          </ButtonGroup>\n        </Toolbar>\n        <div className={clsx(classes.tree)}>\n          <DndProvider backend={HTML5Backend}>\n            <TreeView\n              defaultExpandedNodes={defaultExpandedNodes}\n              onSelectNode={handleNodeSelected}\n            >\n              <TreeItem label={schema.title || \"Root\"} nodeId=\"\">\n                {renderTreeChildren(treeModel.children)}\n              </TreeItem>\n            </TreeView>\n          </DndProvider>\n        </div>\n      </div>\n      <div className={clsx(classes.dataPane)}>\n        {selectedNode ? (\n          <EditorField\n            {...props}\n            onChange={handleDataChange}\n            schema={treeSchema.nodeTypes[selectedNode.nodeType].dataSchema}\n            value={treeModel.rawValues[selectedNode.nodeId].data}\n            pointer={selectedNode.dataPointer}\n          />\n        ) : (\n          <div />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default withStyles(styles as any, { name: \"DcEditorTreeField\" })(\n  EditorTreeField\n);\n","import React from \"react\";\n\nimport { init, SDK } from \"dc-extensions-sdk\";\nimport {\n  Editor,\n  EditorRegistry,\n  getDefaultRegistry,\n  getExtensionParams,\n  SdkContext,\n  withTheme\n} from \"unofficial-dynamic-content-ui\";\nimport EditorTreeField from \"./EditorTreeField/EditorTreeField\";\n\ninterface AppState {\n  connected: boolean;\n  sdk?: SDK;\n  value?: string;\n  schema?: any;\n  openDialog?: string;\n  openDialogCallback?: (value: any) => void;\n}\n\nconst registry: EditorRegistry = getDefaultRegistry();\nregistry.fieldProviders.splice(0, 0, (schema: any) =>\n  schema && schema[\"ui:widget\"] === \"tree\" ? EditorTreeField : undefined\n);\n\nexport default class App extends React.Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = { connected: false };\n    this.handleValueChange = this.handleValueChange.bind(this);\n  }\n\n  public componentDidMount(): void {\n    this.handleConnect();\n  }\n\n  public async handleConnect(): Promise<void> {\n    const sdk: SDK = await init();\n    sdk.frame.startAutoResizer();\n\n    const value: string = await sdk.field.getValue();\n    this.setState({\n      sdk,\n      connected: true,\n      value,\n      schema: {\n        ...sdk.field.schema,\n        \"ui:widget\": \"tree\"\n      }\n    });\n  }\n\n  public async handleValueChange(value: string): Promise<void> {\n    if (this.state.connected && this.state.sdk) {\n      try {\n        await this.state.sdk.field.setValue(value);\n        // tslint:disable-next-line\n      } catch (err) {}\n    }\n  }\n\n  public render(): React.ReactElement {\n    return (\n      <div className=\"App\">\n        {this.state.connected === true ? (\n          <div>\n            {this.state.sdk ? (\n              <SdkContext.Provider value={{ sdk: this.state.sdk }}>\n                {withTheme(\n                  <Editor\n                    pointer={\n                      getExtensionParams(this.state.sdk.field.schema, {})\n                        .pointer\n                    }\n                    onChange={this.handleValueChange}\n                    schema={this.state.schema}\n                    value={this.state.value}\n                    registry={registry}\n                  />\n                )}\n              </SdkContext.Provider>\n            ) : null}\n          </div>\n        ) : (\n          <div>&nbsp;</div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}